---
jupytext:
  formats: md:myst
  text_representation:
    extension: .md
    format_name: myst
    format_version: 0.13
    jupytext_version: 1.13.5
kernelspec:
  display_name: Octave
  language: octave
  name: octave
---
```{code-cell}
:tags: [remove-cell]
run ../../external/replab/replab_init.m
```
# 2.2 Constructing permutation groups

The easiest way is the first one listed below. The others are given for completeness.

## Using `PermutationGroup.of`

```{sidebar}
When the group is small, RepLAB automatically computes the group order (number of elements), here $8$. Some groups are
recognized automatically. Here, RepLAB tells us our group is isomorphic to the [dihedral group of order 8](https://groupprops.subwiki.org/wiki/Dihedral_group:D8).
[TODO: how to enrich atlas](https://github.com/replab/book/issues/1)
```
RepLAB becomes interesting when considering specific groups of permutations. For example, given two permutations, one would
like to enumerate all permutations that can be generated by composition. There are several ways of constructing permutation
groups in RepLAB. The easiest is to call [PermutationGroup.of](+replab.PermutationGroup.of).

```{code-cell}
h1 = [2 1 3 4];
h2 = [3 4 1 2];
H = replab.PermutationGroup.of(h1, h2)
```

This method allows us to name the generators as well (otherwise, they are given the default names `x1` and `x2`):

```{code-cell}
H = replab.PermutationGroup.of('h1', h1, 'h2', h2)
```

## By calling the `PermutationGroup` constructor

Another option is to call the constructor directly.
```{code-cell}
H = replab.PermutationGroup(4, {h1, h2}, 'generatorNames', {'h1', 'h2'})
```

The `generatorNames` keyword argument is optional: if omitted, the default names will be `x1` and `x2` as before.

An interesting optional keyword argument is `order`. If the group order is known beforehand, the group construction can be done much faster. However, an incorrect value leads to undefined behavior (hanging, returning incorrect results). Use with caution.

```{code-cell}
H = replab.PermutationGroup(4, {h1, h2}, 'order', vpi(8));
```

This option is interesting mostly for big groups; thus we write the group order using the [vpi](https://www.mathworks.com/matlabcentral/fileexchange/22725-variable-precision-integer-arithmetic) library, which is included by default with RepLAB-- using the default MATLAB/Octave number type would cause problems above $2^53$, as it has finite precision.

## As subgroups of the symmetric group

One can equivalently construct $H$ as a subgroup of the symmetric group $S_4$ by calling the [subgroup](+replab.PermutationGroup.subgroup) method.
```{code-cell}
S4 = replab.S(4);
H = S4.subgroup({h1, h2});
```

There are two differences with the syntax above: one wraps the group generators in a [cell array](https://www.mathworks.com/help/matlab/cell-arrays.html) (the curly braces!), and the syntax to name the generators differs slightly:

```{code-cell}
S4 = replab.S(4);
H = S4.subgroup({h1, h2}, 'generatorNames', {'h1', 'h2'})
```

The `order` option is also available.

```{code-cell}
S4 = replab.S(4);
H = S4.subgroup({h1, h2}, 'order', vpi(8));
```
