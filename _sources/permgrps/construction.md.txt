---
jupytext:
  formats: md:myst
  text_representation:
    extension: .md
    format_name: myst
    format_version: 0.13
    jupytext_version: 1.13.5
kernelspec:
  display_name: Octave
  language: octave
  name: octave
---
```{code-cell}
:tags: [remove-cell]
run ../../external/replab/replab_init.m
```
# 2.2 Groups from scratch

The easiest way to construct a group is given first below. The other ways are given for completeness.

## Using `PermutationGroup.of`

```{sidebar}
When the group is small, RepLAB automatically computes the group order (number of elements), here $8$. Some groups are
recognized automatically. Here, RepLAB tells us our group is isomorphic to the [dihedral group of order 8](https://groupprops.subwiki.org/wiki/Dihedral_group:D8). New groups can be easily [added to RepLAB's atlas](../reps/subrepresentations.html#adding-a-group-to-the-atlas).
```
RepLAB becomes interesting when considering specific groups of permutations. For example, given two permutations, one would
like to enumerate all permutations that can be generated by composition. There are several ways of constructing permutation
groups in RepLAB. The easiest one is to call [PermutationGroup.of](+replab.PermutationGroup.of).

```{code-cell}
h1 = [2 1 3 4];
h2 = [3 4 1 2];
H = replab.PermutationGroup.of(h1, h2)
```

This method allows us to name the generators as well (otherwise, they are given the default names `x1` and `x2`):

```{code-cell}
H = replab.PermutationGroup.of('h1', h1, 'h2', h2)
```

## By calling the `PermutationGroup` constructor

Another option is to call the constructor directly.
```{code-cell}
H = replab.PermutationGroup(4, {h1, h2}, 'generatorNames', {'h1', 'h2'})
```

The `generatorNames` keyword argument is optional: if omitted, the default names will be `x1` and `x2` as before.

Another interesting optional keyword argument here is `order`. If the group order is known beforehand, the group can be constructed much faster. However, an incorrect value leads to undefined behavior (hanging, returning incorrect results). Use with caution.

```{code-cell}
H = replab.PermutationGroup(4, {h1, h2}, 'order', vpi(8));
```

This option is interesting mostly for big groups; thus we write the group order using the [vpi](https://www.mathworks.com/matlabcentral/fileexchange/22725-variable-precision-integer-arithmetic) library, which is included by default with RepLAB -- using the default MATLAB/Octave number type would cause problems above $2^{53}$, as it has finite precision.

## As subgroups of the symmetric group

One can equivalently construct $H$ as a subgroup of the symmetric group $S_4$ by calling the [subgroup](+replab.PermutationGroup.subgroup) method.
```{code-cell}
S4 = replab.S(4);
H = S4.subgroup({h1, h2});
```

Like when using the `PermutationGroup` constructor, group generators must be wrapped into a [cell array](https://www.mathworks.com/help/matlab/cell-arrays.html) here (the curly braces!), and generators can be named with the help of the dedicated keyword argument:

```{code-cell}
S4 = replab.S(4);
H = S4.subgroup({h1, h2}, 'generatorNames', {'h1', 'h2'})
```

The `order` option is also available.

```{code-cell}
S4 = replab.S(4);
H = S4.subgroup({h1, h2}, 'order', vpi(8));
```

## Symmetric groups

We already mentioned the symmetric group, here are two ways to construct this group:

```{code-cell}
S4 = replab.PermutationGroup.symmetric(4);
S4 = replab.S(4)
```

## Alternating groups

The [alternating group](https://groupprops.subwiki.org/wiki/Alternating_group) is available as well, which contains all permutations that can be expressed as a product of an even number of transpositions.

```{code-cell}
A4 = replab.PermutationGroup.alternating(4);
A4 = replab.A(4)
```

## Dihedral groups

A [dihedral group](https://groupprops.subwiki.org/wiki/Dihedral_group) is the symmetry group of a regular polygon.

```{code-cell}
D4 = replab.PermutationGroup.dihedral(4);
D4 = replab.D(4)
```

## Cyclic groups

The [cyclic group](https://groupprops.subwiki.org/wiki/Finite_cyclic_group) $C_n$ is isomorphic to the group of integers modulo $n$.

```{code-cell}
C4 = replab.PermutationGroup.cyclic(4);
C4 = replab.C(4)
```
